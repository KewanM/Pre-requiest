

eval(pm.globals.get("g_authToken"))();

eval(pm.globals.get("g_setDateRange"))();


utils = {
    setCollectionVariables: function (field) {
        refColName = pm.collectionVariables.get("c_refColName");
        evalue = pm.iterationData.get(refColName)
        //Setting up collection variable for refernce within datasheet with unique id:
        pm.collectionVariables.set("v_evalue", evalue);
        //Getting values from collection.json file for fied under test
        var fieldNames = pm.collectionVariables.get(field)
        //Splitting it at the commas for each field has its own value
        const [jsonField, dbColName, logName] = fieldNames.split(',')
        //Setting vaue for field db,rawquery and json log names
        pm.collectionVariables.set("v_jsonField", jsonField)

        pm.collectionVariables.set("v_dbColName", dbColName)

        pm.collectionVariables.set("v_logName", logName)


        return null;


    },

    clearCollectionVariables: function () {
        pm.collectionVariables.unset("v_evalue");
        pm.collectionVariables.unset("v_logName");

    },

    convertTimeZone: function (getJSONValue, getDBValue) {
        //convert json Date
        const jsonDate = new Date(getJSONValue);
        var dt = (jsonDate.getUTCDate());
        var mnth = (jsonDate.getUTCMonth() + 1);//adding one b/c months start from 0
        var yr = (jsonDate.getUTCFullYear());
        var formatJSONValue = (dt + "-" + mnth + "-" + yr);


        //convert db Date
        const dbDate = new Date(getDBValue);
        var db_dt = (jsonDate.getUTCDate());
        var db_mnth = (jsonDate.getUTCMonth() + 1);//adding one b/c months start from 0
        var db_yr = (jsonDate.getUTCFullYear());
        var formatDBValue = (db_dt + "-" + db_mnth + "-" + db_yr);
        // return as an array
        return [formatDBValue, formatJSONValue];

    },
    formatDateValidation: function (jsonData, field) {

        utils.setCollectionVariables(field);
        pm.test("TEST TYPE: Validate Field: " + field + " match for DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {
            //Initalizing:
            let i = "The Two Dates Match";
            var getDBValue = "";
            var getJSONValue = "";

            const jsonResponse = jsonData.results[0].asset.details.find
                (m => m.name === field);

            //Declaring:
            getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
            getDBValue = getDBValueRaw.replace(/\s+/g, '').toLowerCase();
            getJSONValue = jsonResponse.value;
            var dates = utils.convertTimeZone(getJSONValue, getDBValue);
            const formatJSONValue = dates[1], formatDBValue = dates[0];
            UIFieldName = pm.collectionVariables.get("v_logName");

            console.log("getdb value: " + getDBValue)
            console.log("getJSONValue value: " + getJSONValue)
            console.log("formatJSONValue value: " + formatJSONValue)
            console.log("formatDBValue value: " + formatDBValue)

            if (formatJSONValue === formatDBValue) {

            } else {
                i = "The Two Dates Do Not Match";

            }
            console.log("***********START*******************");
            console.log("Field under test: " + pm.collectionVariables.get("v_logName") + " with DB-ID as: " + pm.collectionVariables.get("v_evalue"))
            console.log("JSON Response: " + getJSONValue);
            console.log("DB Test Value: " + getDBValue);

            if (i === "The Two Dates Match") {
                console.log("PASS : Result:" + i);
            } else {
                console.log("FAIL :Result:" + i);
            }
            console.log("***********END*******************");
            console.log("********************************");


            pm.expect(i).to.eql("The Two Dates Match");

        });
    },
    validateFieldMapping: function (jsonData, field) {

        var i = "not found";
        //jsonData => json response
        //field => json response field name under test
        var getDBValue = "";
        var getJSONValue = "";

        utils.setCollectionVariables(field);


        //Variable Declaration
        var jResponse = jsonData.results[0].asset.details.find
            (m => m.name === field);
        console.log("jresponse: " + JSON.stringify(jResponse));

        pm.test("TEST TYPE:Search Field Mapping-Field Name: " + pm.collectionVariables.get("v_logName") + " with DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {
          
                if ((field === "appt_made_date_formatted"|| field === "appt_start_date_formatted" || field === "appt_end_date_formatted"  || field === "appt_cancel_date"  || field === "last_entry_date" || field === "toa_formatted" ||field === "tod_formatted" ||field === "dob" )) {
                utils.formatDateValidation(jsonData, field);

            } else {

                isNumber = (utils.isNumber(pm.iterationData.get(pm.collectionVariables.get("v_dbColName"))))
                console.log("field: " + field)
                console.log("isNumber: " + isNumber)


                if (isNumber == true) {
                    jsonResponse = jResponse.value
                    getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                    getDBValue = getDBValueRaw

                    /**   if (jsonResponse.includes(getDBValue)) {
                          i = "found"
                      } else {
  
                      }*/
                } else {

                    jsonResponse = String(jResponse.value).toLowerCase().replace(/\s+/g, '');
                    getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                    getDBValue = getDBValueRaw.toLowerCase().replace(/\s+/g, '');
                }
                const isNull = (getDBValue === "" && jsonResponse === "null");

                if (jsonResponse == getDBValue || isNull == true) {
                    i = "found"
                } else {

                }

                console.log("***********START*******************");
                console.log("Field under test :" + pm.collectionVariables.get("v_logName") + " with id: " + pm.collectionVariables.get("v_evalue"))
                console.log("DB value:" + getDBValue);
                console.log("JSON response:" + jsonResponse);

                if (i === "found") {
                    console.log("PASS : Result:" + i);
                } else {
                    console.log("FAIL :Result:" + i);
                }
                console.log("***********END*******************");
                console.log("********************************");
                pm.expect(i).to.eql("found");
            }
        });



    },

    processJson: function (jsonData, testType, field) {
        _.each(jsonData.results, (arrResult) => {
            _.each(arrResult.asset.details, (arrItem) => {
                pkValue = utils.getPrimaryKeyValue(arrResult, arrItem);

                if ((field === "appt_made_date_formatted" && arrItem.name === "appt_made_date_formatted" || field === "appt_start_date_formatted" && arrItem.name === "appt_start_date_formatted" || field === "appt_end_date_formatted" && arrItem.name === "appt_end_date_formatted" || field === "appt_cancel_date" && arrItem.name === "appt_cancel_date" || field === "last_entry_date" && arrItem.name === "last_entry_date" || field === "toa_formatted" && arrItem.name === "toa_formatted"||field === "tod_formatted" && arrItem.name === "tod_formatted"||field === "dob" && arrItem.name === "dob")) {

                    utils.validateDateInRange(arrItem, field, pkValue);
                } else {



                    switch (testType) {
                        case "any":
                            utils.validateAny(arrItem, field, pkValue);
                            break;
                        case "all":
                            utils.validateAll(arrItem, field, pkValue);
                            break;
                        case "ce":
                            utils.validateExactly(arrItem, field, pkValue);
                            break;
                        case "nall":
                            utils.validateNotALL(arrItem, field, pkValue);
                            break;
                        case "nany":
                            utils.validateNotAny(arrItem, field, pkValue);
                            break;
                        case "nce":
                            utils.validateNotExactly(arrItem, field, pkValue);
                            break;
                    }
                }

            });
        });

        return "test";

    },

    validateDateInRange: function (arrItem, field, pkValue) {

        utils.setCollectionVariables(field);

        var result = false;
        var D1 = "";
        var D2 = "";
        var D3 = "";
        let i = "date not in range";
        pm.test("TEST:Validate: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue") + " is in between the date range", () => {

            D1 = (pm.environment.get("env_dateFrom"));
            D2 = (pm.environment.get("env_dateTo"));
            D3 = String(arrItem.value);
  console.log("D1: " + D1);
            console.log("D2: " + D2);
            console.log("D3:" + D3);

            D1 = new Date(D1);
            D2 = new Date(D2);
            D3 = new Date(D3);
  console.log("D1--2: " + D1);
            console.log("D2: " + D2);
            console.log("D3:" + D3);

            if (D3.getTime() <= D2.getTime()
                && D3.getTime() >= D1.getTime()) {
                i = "date in range";

            } else {

            }
            console.log("Testing JSON-ID: " + pkValue);
            console.log("Date From: " + D1);
            console.log("Date To:" + D2);
            console.log("Json Date" + D3);
            if (i === "date in range") {
                console.log("PASS : Result:" + i);
                result = true;
            } else {
                console.log("FAIL :Result:" + i);
            }
            console.log("***********END*******************");
            console.log("********************************");
            pm.expect(i).to.eql("date in range");
        });

        return result;

    },
    // arrItem  - UI response; field - field name for test 
    validateAny: function (arrItem, field, pkValue) {
        if (arrItem.name === field) {

            let i = "not found";
            utils.setCollectionVariables(field);
            var result = false;
            var getJSONValue = "";
            var getDBValue = "";
            var data2Array = "";



            isNumber = (utils.isNumber(pm.iterationData.get(pm.collectionVariables.get("v_dbColName"))))
            console.log("isNumber :" + isNumber)

            if (isNumber == true) {

                getJSONValue = String(arrItem.value).replace(/\s+/g, '');
                getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                getDBValue = getDBValueRaw
                if (getJSONValue.includes(getDBValue)) {
                    i = "found";
                } else {


                }



            } else {



                getJSONValue = String(arrItem.value).toLowerCase()//.replace(/\s+/g, '');
                console.log("getJSONValue: " + getJSONValue)
                getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                console.log("getDBValueRaw: " + getDBValueRaw)
                getDBValue = getDBValueRaw.toLowerCase()
                console.log("getDBValue: " + getDBValue)

              /// data2Array = getDBValue.split(/[.\-_/]/)  
                     // data2Array = getDBValue.split(/(\s+)/)
                      //   data2Array = data2Array1.split(/[.\-_/]/)  
                          data2Array = getDBValue.split(/[^A-Za-z]/);

console.log("data2Array: "+data2Array)

                //data2Array = getDBValue.split(/(\s+)/).filter(function (e) { return e.trim().length > 0; });
                _.each(data2Array, (data2) => {
console.log("data2: "+data2)
                    if (getJSONValue.includes(data2)) {
                        i = "found";
                    } else {
                        // i = "not found";

                    }


                })
            }

            //Skip Check- Filters are ignored if the test data is blank therefore skiping test 
            const isNull = (getDBValue === "");

            (isNull ? pm.test.skip : pm.test)("TEST Type: ANY; FieldName: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {



                console.log("************START******************");
                console.log("Testing JSON-ID: " + pkValue);
                console.log("TEST Type: ANY; Validation:- " + pm.collectionVariables.get("v_logName") + "-with filter:" + data.set_filter);



                console.log("DB subject:" + getDBValue);
                console.log("JSON response:" + getJSONValue);
                if (i === "found") {
                    console.log("PASS : Result:" + i);
                    result = true;
                } else {
                    console.log("FAIL :Result:" + i);
                }
                console.log("***********END*******************");
                console.log("********************************");
                pm.expect(i).to.eql("found");


            })
            return result;
        }

    },
    validateAll: function (arrItem, field, pkValue) {
        if (arrItem.name === field) {
            let i = "found";
            utils.setCollectionVariables(field);
            var result = false;
            var data1 = "";
            var getDBValue = "";
            var data2Array = "";



            isNumber = (utils.isNumber(pm.iterationData.get(pm.collectionVariables.get("v_dbColName"))))
            console.log("isNumber :" + isNumber)

            if (isNumber == true) {
                getJSONValue = String(arrItem.value).replace(/\s+/g, '');
                getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                getDBValue = getDBValueRaw



                if (getJSONValue.includes(getDBValue)) {

                } else {
                    i = "not found";
                }

            } else {
                getJSONValue = String(arrItem.value).toLowerCase().replace(/\s+/g, '');
                console.log("getJSONValue: " + getJSONValue)
                getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                console.log("getDBValueRaw: " + getDBValueRaw)
                getDBValue = getDBValueRaw.toLowerCase().replace(/\s+/g, '');
                console.log("getDBValue: " + getDBValue)

                data2Array = getDBValue.split(/(\s+)/).filter(function (e) { return e.trim().length > 0; });
                _.each(data2Array, (data2) => {
                    if (getJSONValue.includes(data2)) {

                    } else {
                        i = "not found";
                    }
                })
            }


            //Skip Check- Filters are ignored if the test data is blank therefore skiping test 
            const isNull = (getDBValue === "");

            (isNull ? pm.test.skip : pm.test)("TEST Type: ALL OF; FieldName: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {





                console.log("************START******************");
                console.log("Testing JSON-ID: " + pkValue);
                console.log("TEST Type: All; Validation:- " + pm.collectionVariables.get("v_logName") + "-with filter:" + data.set_filter);
                console.log("DB subject:" + getDBValue);
                console.log("JSON response:" + getJSONValue);
                if (i === "found") {
                    console.log("PASS : Result:" + i);
                    result = true;
                } else {
                    console.log("FAIL :Result:" + i);
                }
                console.log("***********END*******************");
                console.log("********************************");
                pm.expect(i).to.eql("found");


            })
            return result;
        }
    },
    validateNotALL: function (arrItem, field, pkValue) {
        if (arrItem.name === field) {

            utils.setCollectionVariables(field);
            var result = false;
            var getJSONValue = "";
            var getDBValue = "";
            var data2Array = "";
            var counter = 0;
            var foundCounter = 0;


            isNumber = (utils.isNumber(pm.iterationData.get(pm.collectionVariables.get("v_dbColName"))))
            console.log("isNumber :" + isNumber)

            if (isNumber == true) {
                getJSONValue = String(arrItem.value).replace(/\s+/g, '');
                getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                getDBValue = getDBValueRaw
            } else {



                getJSONValue = String(arrItem.value).toLowerCase().replace(/\s+/g, '');
                console.log("getJSONValue: " + getJSONValue)
                getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                console.log("getDBValueRaw: " + getDBValueRaw)
                getDBValue = getDBValueRaw.toLowerCase().replace(/\s+/g, '');
                console.log("getDBValue: " + getDBValue)
            }


            //Skip Check- Filters are ignored if the test data is blank therefore skiping test 
            const isNull = (getDBValue === "");

            (isNull ? pm.test.skip : pm.test)("TEST Type: NOT ALL; FieldName: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {


                let i = "MATCH FOUND";


                console.log("************START******************");
                console.log("Testing JSON-ID: " + pkValue);
                console.log("TEST Type: Not All; Validation:- " + pm.collectionVariables.get("v_logName") + "-with filter:" + data.set_filter);


                if (isNumber == false) {
                    data2Array = getDBValue.split(/(\s+)/).filter(function (e) { return e.trim().length > 0; });

                    _.each(data2Array, (data2) => {
                        counter = counter + 1;
                        if (getJSONValue === "") {
                            if (getJSONValue.eql(data2)) {

                                foundCounter = foundCounter + 1;
                                //i = "MATCH FOUND";
                            } else {

                            }
                        } else {
                            if (getJSONValue.includes(data2)) {
                                foundCounter = foundCounter + 1;
                                //i = "MATCH FOUND";
                            } else {
                                // notFoundCounter = notFoundCounter +1;
                            }
                        }

                    })

                } else {
                    counter = counter + 1;
                    if (getJSONValue === "") {
                        if (getJSONValue.eql(getDBValue)) {

                            foundCounter = foundCounter + 1;
                            //i = "MATCH FOUND";
                        } else {

                        }
                    } else {
                        if (getJSONValue.includes(getDBValue)) {
                            foundCounter = foundCounter + 1;
                            //i = "MATCH FOUND";
                        } else {
                            // notFoundCounter = notFoundCounter +1;
                        }
                    }

                }
                console.log("counter: " + counter)
                console.log("foundCounter: " + foundCounter);
                if (counter != foundCounter) {
                    i = "MATCH NOT FOUND";
                }

                console.log("DB subject:" + getDBValue);
                console.log("JSON response:" + getJSONValue);
                if (i === "MATCH NOT FOUND") {
                    console.log("PASS : Result:" + i);
                    result = true;
                } else {
                    console.log("FAIL :Result:" + i);
                }
                console.log("***********END*******************");
                console.log("********************************");
                pm.expect(i).to.eql("MATCH NOT FOUND");

            })
            return result;
        }
    },
    validateNotAny: function (arrItem, field, pkValue) {
        if (arrItem.name === field) {
             let i = "MATCH NOT FOUND";
            utils.setCollectionVariables(field);
            var result = false;
            var getDBValue = "";
            var data2Array = "";

            isNumber = (utils.isNumber(pm.iterationData.get(pm.collectionVariables.get("v_dbColName"))))


            if (isNumber == true) {
                getJSONValue = String(arrItem.value).replace(/\s+/g, '');
                getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                getDBValue = getDBValueRaw

               
                    if (getJSONValue.includes(getDBValue)) {
                        console.log("JSON: " + getJSONValue);
                        console.log("DB Value:" + data2);
                        i = "MATCH FOUND";
                    } else {

                    }
            
            } else {



                getJSONValue = String(arrItem.value).toLowerCase().replace(/\s+/g, '');
                console.log("getJSONValue: " + getJSONValue)
                getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                console.log("getDBValueRaw: " + getDBValueRaw)
                getDBValue = getDBValueRaw.toLowerCase().replace(/\s+/g, '');
                console.log("getDBValue: " + getDBValue)

                  data2Array = getDBValue.split(/(\s+)/).filter(function (e) { return e.trim().length > 0; });
                _.each(data2Array, (data2) => {

                    if (getJSONValue.includes(data2)) {
                        console.log("JSON: " + getJSONValue);
                        console.log("DB Value:" + data2);
                        i = "MATCH FOUND";
                    } else {

                    }
                })
            }

            //Skip Check- Filters are ignored if the test data is blank therefore skiping test 
            const isNull = (getDBValue === "");

            (isNull ? pm.test.skip : pm.test)("TEST Type: NOT ANY; FieldName: " + pm.collectionVariables.get("v_logName") + "  With DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {



               

                console.log("************START******************");
                console.log("Testing JSON-ID: " + pkValue);
                console.log("TEST Type:Not ANY; Validation:- " + pm.collectionVariables.get("v_logName") + "-with filter:" + data.set_filter);


              

                console.log("DB subject:" + getDBValue);
                console.log("JSON response:" + getJSONValue);

                if (i === "MATCH NOT FOUND") {
                    console.log("PASS : Result:" + i);
                    result = true;
                } else {
                    console.log("FAIL :Result:" + i);
                }
                console.log("***********END*******************");
                console.log("********************************");
                pm.expect(i).to.eql("MATCH NOT FOUND");

            })
            return result;
        }
    },
    validateNotExactly: function (arrItem, field, pkValue) {
        if (arrItem.name === field) {

            utils.setCollectionVariables(field);
            var result = false;
            var data1 = "";
            var getDBValue = "";

            isNumber = (utils.isNumber(pm.iterationData.get(pm.collectionVariables.get("v_dbColName"))))


            if (isNumber == true) {
                getJSONValue = String(arrItem.value).replace(/\s+/g, '');
                getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                getDBValue = getDBValueRaw
            } else {



                getJSONValue = String(arrItem.value).toLowerCase().replace(/\s+/g, '');
                console.log("getJSONValue: " + getJSONValue)
                getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                console.log("getDBValueRaw: " + getDBValueRaw)
                getDBValue = getDBValueRaw.toLowerCase().replace(/\s+/g, '');
                console.log("getDBValue: " + getDBValue)
            }


            //Skip Check- Filters are ignored if the test data is blank therefore skiping test 
            const isNull = (getDBValue === "");

            (isNull ? pm.test.skip : pm.test)("TEST Type: NOT EXACTLY; FieldName: " + pm.collectionVariables.get("v_logName") + "  With DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {



                let i = "MATCH NOT FOUND";

                console.log("************START******************");
                console.log("Testing JSON-ID: " + pkValue);
                console.log("TEST Type: NOT EXACTLY; Validation:- " + pm.collectionVariables.get("v_logName") + "-with filter:" + data.set_filter);



                if (getJSONValue != getDBValue) {

                } else {

                    i = "MATCH FOUND";
                }


                console.log("DB subject:" + getDBValue);
                console.log("JSON response:" + getJSONValue);
                if (i === "MATCH NOT FOUND") {
                    console.log("PASS : Result:" + i);
                    result = true;
                } else {
                    console.log("FAIL :Result:" + i);
                }
                console.log("***********END*******************");
                console.log("********************************");
                pm.expect(i).to.eql("MATCH NOT FOUND");
            })
            return result;
        }
    },
    validateExactly: function (arrItem, field, pkValue) {
        if (arrItem.name === field) {


            utils.setCollectionVariables(field);
            var result = false;
            var getJSONValue = "";
            var getDBValue = "";


            isNumber = (utils.isNumber(pm.iterationData.get(pm.collectionVariables.get("v_dbColName"))))


            if (isNumber == true) {
                getJSONValue = String(arrItem.value).replace(/\s+/g, '');
                getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                getDBValue = getDBValueRaw
            } else {



                getJSONValue = String(arrItem.value).toLowerCase().replace(/\s+/g, '');
                console.log("getJSONValue: " + getJSONValue)
                getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                console.log("getDBValueRaw: " + getDBValueRaw)
                getDBValue = getDBValueRaw.toLowerCase().replace(/\s+/g, '');
                console.log("getDBValue: " + getDBValue)
            }

            console.log("db value : " + getDBValue)
            //Skip Check- Filters are ignored if the test data is blank therefore skiping test 
            var isNull = (getDBValue === "");

            (isNull ? pm.test.skip : pm.test)("TEST Type: MATCH EXACTLY; FieldName: " + pm.collectionVariables.get("v_logName") + "  With DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {
                // if (arrItem.name === field) {

                let i = "THE TWO FIELDS MATCH EXACTLY";

                console.log("************START******************");
                console.log("Testing JSON-ID: " + pkValue);
                console.log("TEST Type: EXACTLY; Validation:- " + pm.collectionVariables.get("v_logName") + "-with filter:" + data.set_filter);


                if (getJSONValue.includes(getDBValue)) {

                } else {
                    i = "THE TWO FIELDS DO NOT MATCH EXACTLY";
                }

                console.log("DB subject:" + getDBValue);
                console.log("JSON response:" + getJSONValue);

                if (i === "THE TWO FIELDS MATCH EXACTLY") {
                    console.log("PASS : Result:" + i);
                    result = true;
                } else {
                    console.log("FAIL :Result:" + i);
                }
                console.log("***********END*******************");
                console.log("********************************");
                pm.expect(i).to.eql("THE TWO FIELDS MATCH EXACTLY");


            })
            return result;
        }
    },
    getPrimaryKeyValue: function (arrResult, arrItem) {
        var sasName = pm.collectionVariables.get("c_sasName")

        switch (sasName) {
            case "waves":
                return arrResult.fileName;
            case "perlbcsw":
                return arrResult.fileName;
            case "cranes":
                return arrResult.fileName;
        }
        console.log("getPrimaryKeyValue :no match for sasName: " + sasName);
        return "error";
    },
    processNestedFieldMapping: function (jsonData, field) {
        utils.setCollectionVariables(field);

        _.each(jsonData.results, (arrResult) => {

            if ((field === "cre_date_s" && arrItem.name === "cre_date_s" || field === "rcv_date_s" && arrItem.name === "rcv_date_s" || field === "rec_update_s" && arrItem.name === "rec_update_s" || field === "act_date_s" && arrItem.name === "act_date_s" || field === "doc_date_s" && arrItem.name === "doc_date_s" || field === "dsp_date_s" && arrItem.name === "dsp_date_s")) {

                utils.formatNestedDateValidation(arrResult, field)

            } else {
                utils.validateNestedFieldMapping(arrResult, field)



            }
        });
        return "test";
    },


    isNumber: function (n) {
        return /^-?[\d.]+(?:e-?\d+)?$/.test(n);
    },


    validateNestedFieldMapping: function (arrResult, field) {
        let i = "json response did not match";
        var result = false;
        var getDBValue = "";
        var jsonResponse = "";


        pm.test("TEST Type:Nested Field Mapping- FieldName: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue"), function () {
            _.each(arrResult.asset.details, (arrItem) => {
                pkValue = utils.getPrimaryKeyValue(arrResult, arrItem);


                isNumber = (utils.isNumber(pm.iterationData.get(pm.collectionVariables.get("v_dbColName"))))

                if (arrItem.name === field) {
                    if (isNumber == true) {
                        jsonResponse = String(arrItem.value)
                        getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                        getDBValue = getDBValueRaw
                    } else {



                        jsonResponse = String(arrItem.value).toLowerCase().replace(/\s+/g, '');
                        getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                        getDBValue = getDBValueRaw.toLowerCase().replace(/\s+/g, '');
                    }
                    const isNull = (getDBValue === "" && jsonResponse === "null");
                    if (jsonResponse === getDBValue || isNull == true) {
                        i = "json response matched";
                    } else {

                    }

                }
            });

            console.log("**********START:validateNestedFieldMapping********************")
            console.log("Field under test: " + field)
            console.log("Testing JSON-ID: " + pkValue);
            console.log("DB Value: " + getDBValue);
            console.log("Json Response:" + jsonResponse);
            if (i === "json response matched") {
                console.log("PASS : Result:" + i);
                result = true;
            } else {
                console.log("FAIL :Result:" + i);
            }
            console.log("**********END:validateNestedFieldMapping********************")

            pm.expect(i).to.eql("json response matched");

            return result;


        });

    },


    formatNestedDateValidation: function (arrResult, field) {
        let i = "json response did not match";
        var result = false;
        var getDBValue = "";
        var jsonResponse = "";
        var formatJSONValue = "";
        var formatDBValue = "";


        pm.test("TEST Type:Nested Field Mapping- FieldName: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue"), function () {
            _.each(arrResult.asset.details, (arrItem) => {
                pkValue = utils.getPrimaryKeyValue(arrResult, arrItem);
                if (arrItem.name === field) {


                    jsonResponse = String(arrItem.value).replace(/\s+/g, '');
                    getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
                    getDBValue = getDBValueRaw.toLowerCase();

                    var dates = utils.convertTimeZone(jsonResponse, getDBValue);
                    formatJSONValue = dates[1], formatDBValue = dates[0];

                    if (formatJSONValue === formatDBValue) {
                        i = "json response matched";
                    } else {

                    }

                }
            });
            console.log("**********START:formatNestedDateValidation********************")
            console.log("Field under test: " + field)
            console.log("Testing JSON-ID: " + pkValue);
            console.log("DB Value: " + formatDBValue);
            console.log("Json Response:" + formatJSONValue);
            if (i === "json response matched") {
                console.log("PASS : Result:" + i);
                result = true;
            } else {
                console.log("FAIL :Result:" + i);
            }
            console.log("**********END:formatNestedDateValidation********************")

            pm.expect(i).to.eql("json response matched");

            return result;
        });


    },
    objProcessJson: function (jsonData, testType, field) {

        utils.setCollectionVariables(field);

        _.each(jsonData.results, (arrResult) => {

            if (field === "event_date") {

                utils.objValidateDateInRange(arrResult, field)
            } else {

                switch (testType) {
                    case "any":
                        utils.objValidateAny(arrResult, field);
                        break;
                    case "all":
                        utils.objValidateAll(arrResult, field);
                        break;
                    case "ce":
                        utils.objValidateExactly(arrResult, field);
                        break;
                    case "nall":
                        console.log("starting ")
                        utils.objValidateNotALL(arrResult, field);
                        break;
                    case "nany":
                        utils.objValidateNotAny(arrResult, field);
                        break;
                    case "nce":
                        utils.objValidateNotExactly(arrResult, field);
                        break;
                }


            }
        });

        return "test";

    },

    // arrItem  - UI response; field - field name for test 
    objValidateAny: function (arrResult, field) {
        utils.setCollectionVariables(field);


        let i = "not found";
        var result = false;
        var getDBValue = "";
        var jsonResponse = "";
        var getDBArray = "";
        const countObj = "";

        getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
        getDBValue = getDBValueRaw//.replace(/\s+/g, '').toLowerCase();

        //Skip Check
        const isNull = (getDBValue == "");

        (isNull ? pm.test.skip : pm.test)("TEST Type:ANY; FieldName: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {
            _.each(arrResult.asset.details, (arrItem) => {
                pkValue = utils.getPrimaryKeyValue(arrResult, arrItem);

                if (arrItem.name === field) {

                    /* countObj = arrItem.find
                                (m => m.name === field);
                            console.log("Number of Json Objects for fiels: " + field + "----" + countObj.length)*/

                    jsonResponse = String(arrItem.value)//.replace(/\s+/g, '');
                    getDBArray = getDBValue.split(/[ .:;?!~,`"&|()<>{}\[\]\r\n/\\]+/).filter(function (e) { return e.trim().length > 0; });  //.split(/(\s+)/)

                    _.each(getDBArray, (splitDBValue) => {

                        if (jsonResponse.includes(splitDBValue)) {
                            i = "found";
                        } else {

                        }


                    })
                    console.log("**********START:objValidateAny********************")
                    console.log("Field under test: " + field)
                    console.log("Testing JSON-ID: " + pkValue);
                    console.log("DB Value: " + getDBValue);
                    console.log("Json Response:" + jsonResponse);
                    console.log("**********END:objValidateAny********************")
                }

            });

            if (i === "found") {
                console.log("PASS : Result:" + i);
                result = true;
            } else {
                console.log("FAIL :Result:" + i);
            }


            pm.expect(i).to.eql("found");

            return result;
        })
    },

    objValidateAll: function (arrResult, field) {

        let i = "not found";
        var result = false;
        var getDBValue = "";
        var jsonResponse = "";
        getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
        getDBValue = getDBValueRaw.replace(/\s+/g, '').toLowerCase();

        //Skip Check
        const isNull = (getDBValue == "");

        (isNull ? pm.test.skip : pm.test)("TEST Type:ALL; FieldName: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {

            _.each(arrResult.asset.details, (arrItem) => {
                pkValue = utils.getPrimaryKeyValue(arrResult, arrItem);

                if (arrItem.name === field) {


                    jsonResponse = String(arrItem.value).replace(/\s+/g, '').toLowerCase();
                    getDBArray = getDBValue.split(/[ .:;?!~,`"&|()<>{}\[\]\r\n/\\]+/).filter(function (e) { return e.trim().length > 0; });  //.split(/(\s+)/)

                    _.each(getDBArray, (splitDBValue) => {

                        if (jsonResponse.includes(splitDBValue)) {
                            i = "found";

                        } else {

                        }

                    })
                }


            });
            console.log("**********START:objValidateAll********************")
            console.log("Field under test: " + field)
            console.log("Testing JSON-ID: " + pkValue);
            console.log("DB Value: " + getDBValue);
            console.log("Json Response:" + jsonResponse);
            console.log("**********END:objValidateAll********************")

            if (i === "found") {
                console.log("PASS : Result:" + i);
                result = true;
            } else {
                console.log("FAIL :Result:" + i);
            }

            pm.expect(i).to.eql("found");


        })

        return result;

    },
    objValidateNotALL: function (arrResult, field) {

        let i = "found";
        var result = false;
        var inJson = false;
        var getDBValue = "";
        var jsonResponse = "";
        var foundCounter = 0;
        var counter = 0;

        getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
        getDBValue = getDBValueRaw.replace(/\s+/g, '').toLowerCase();

        //Skip Check
        const isNull = (getDBValue == "");

        (isNull ? pm.test.skip : pm.test)("TEST Type:NOT ALL; FieldName: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {

            _.each(arrResult.asset.details, (arrItem) => {

                pkValue = utils.getPrimaryKeyValue(arrResult, arrItem);
                if (arrItem.name === field) {
                    inJson = true;

                    jsonResponse = String(arrItem.value).replace(/\s+/g, '');

                    getDBArray = getDBValue.split(/[ .:;?!~,`"&|()<>{}\[\]\r\n/\\]+/).filter(function (e) { return e.trim().length > 0; });  //.split(/(\s+)/)

                    _.each(getDBArray, (splitDBValue) => {
                        counter = counter + 1;
                        if (jsonResponse.includes(splitDBValue)) {
                            //counter = 'found';
                            foundCounter = foundCounter + 1;
                        } else {

                        }

                    })
                }
            });
            if (!inJson) {
                i = "not found";
            }
            console.log("counter:" + counter);
            console.log("foundCounter" + foundCounter);
            if (counter != foundCounter) {
                i = "not found";
            }
            console.log("**********START:objValidateNotALL********************")
            console.log("Field under test: " + field)
            console.log("Testing JSON-ID: " + pkValue);
            console.log("DB Value: " + getDBValue);
            console.log("Json Response:" + jsonResponse);
            if (i === "not found") {
                console.log("PASS : Result:" + i);
                result = true;
            } else {
                console.log("FAIL :Result:" + i);
            }
            console.log("**********END:objValidateNotALL********************")

            pm.expect(i).to.eql("not found");

        })

        return result;
    },
    objValidateNotAny: function (arrResult, field) {

        let i = "not found";
        var result = false;
        var inJson = false;
        var getDBValue = "";
        var jsonResponse = "";
        var getDBArray = "";
        getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
        getDBValue = getDBValueRaw.replace(/\s+/g, '').toLowerCase();

        //Skip Check
        const isNull = (getDBValue == "");

        (isNull ? pm.test.skip : pm.test)("TEST Type:NOT ANY; FieldName: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {
            _.each(arrResult.asset.details, (arrItem) => {
                pkValue = utils.getPrimaryKeyValue(arrResult, arrItem);
                if (arrItem.name === field) {
                    inJson = true;

                    jsonResponse = String(arrItem.value).replace(/\s+/g, '').toLowerCase();

                    getDBArray = getDBValue.split(/[ .:;?!~,`"&|()<>{}\[\]\r\n/\\]+/).filter(function (e) { return e.trim().length > 0; });  //.split(/(\s+)/)

                    _.each(getDBArray, (splitDBValue) => {

                        if (jsonResponse.includes(splitDBValue)) {
                            i = "found";
                        } else {

                        }


                    });

                }

            });

            if (!inJson) {
                i = "not found";
            }
            console.log("**********START:objValidateNotAny********************")
            console.log("Field under test: " + field)
            console.log("Testing JSON-ID: " + pkValue);
            console.log("DB Value: " + getDBValue);
            console.log("Json Response:" + jsonResponse);
            console.log("**********END:objValidateNotAny********************")

            if (i === "not found") {
                console.log("PASS : Result:" + i);
                result = true;
            } else {
                console.log("FAIL :Result:" + i);
            }


            pm.expect(i).to.eql("not found");

            return result;
        })
    },
    objValidateNotExactly: function (arrResult, field) {

        let i = "found";
        var result = false;
        var inJson = false;
        var getDBValue = "";
        var jsonResponse = "";
        getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
        getDBValue = getDBValueRaw.replace(/\s+/g, '').toLowerCase();

        //Skip Check
        const isNull = (getDBValue == "");

        (isNull ? pm.test.skip : pm.test)("TEST Type:NOT EXACTLY; FieldName: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {
            _.each(arrResult.asset.details, (arrItem) => {
                pkValue = utils.getPrimaryKeyValue(arrResult, arrItem);
                if (arrItem.name === field) {
                    inJson = true;
                    jsonResponse = String(arrItem.value).replace(/\s+/g, '');

                    //   if (jsonResponse != getDBValue) {
                    if (jsonResponse === getDBValue) {

                    } else {
                        i = "not found";
                    }


                }


            });
            if (!inJson) {
                i = "not found";
            }


            console.log("**********START:objValidateNotExactly********************")
            console.log("Field under test: " + field)
            console.log("Testing JSON-ID: " + pkValue);
            console.log("DB Value: " + getDBValue);
            console.log("Json Response:" + jsonResponse);
            console.log("**********END:objValidateNotExactly********************")

            if (i === "not found") {
                console.log("PASS : Result:" + i);
                result = true;
            } else {
                console.log("FAIL :Result:" + i);
            }


            pm.expect(i).to.eql("not found");


        })

        return result;



    },

    objValidateExactly: function (arrResult, field) {

        let i = "not found";
        var result = false;
        var getDBValue = "";
        var jsonResponse = "";

        getDBValueRaw = pm.iterationData.get(pm.collectionVariables.get("v_dbColName"));
        getDBValue = getDBValueRaw.replace(/\s+/g, '').toLowerCase();

        //Skip Check
        const isNull = (getDBValue == "");

        (isNull ? pm.test.skip : pm.test)("TEST Type:EXACTLY; FieldName: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue"), () => {
            _.each(arrResult.asset.details, (arrItem) => {
                pkValue = utils.getPrimaryKeyValue(arrResult, arrItem);
                if (arrItem.name === field) {
                    jsonResponse = String(arrItem.value).replace(/\s+/g, '').toLowerCase();

                    if (jsonResponse === getDBValue) {
                        i = "found";
                    } else {
                    }

                }

            });
            console.log("**********START:objValidateExactly********************")
            console.log("Field under test: " + field)
            console.log("Testing JSON-ID: " + pkValue);
            console.log("DB Value: " + getDBValue);
            console.log("Json Response:" + jsonResponse);
            if (i === "found") {
                console.log("PASS : Result:" + i);
                result = true;
            } else {
                console.log("FAIL :Result:" + i);
            }
            console.log("**********END:objValidateExactly********************")

            pm.expect(i).to.eql("found");


        })

        return result;

    },
    objValidateDateInRange: function (arrResult, field) {
        var dateFrom = "";
        var dateTo = "";
        var jsonDate = "";

        let i = "date not in range";
        var result = false;
        pm.test("TEST:Validate: " + pm.collectionVariables.get("v_logName") + " With DB-ID: " + pm.collectionVariables.get("v_evalue") + " is in between the date range", () => {
            _.each(arrResult.asset.details, (arrItem) => {
                pkValue = utils.getPrimaryKeyValue(arrResult, arrItem);
                if (arrItem.name === field) {

                    dateFrom = (pm.environment.get("env_dateFrom"));
                    dateTo = (pm.environment.get("env_dateTo"));
                    jsonDate = String(arrItem.value);

                    dateFrom = new Date(dateFrom);
                    dateTo = new Date(dateTo);
                    jsonDate = new Date(jsonDate);
                    if (jsonDate.getTime() <= dateTo.getTime()
                        && jsonDate.getTime() >= dateFrom.getTime()) {
                        i = "date in range";

                    } else {

                    }
                }


            });
            console.log("**********START:objValidateDateInRange********************")
            console.log("Field under test: " + field)
            console.log("Testing JSON-ID: " + pkValue);
            console.log("Date From: " + dateFrom);
            console.log("Date To:" + dateTo);
            console.log("Json Date" + jsonDate);
            if (i === "date in range") {
                console.log("PASS : Result:" + i);
                result = true;
            } else {
                console.log("FAIL :Result:" + i);
            }
            console.log("***********END*******************");
            console.log("********************************");
            pm.expect(i).to.eql("date in range");
        });
        return result;

    },

    // "*************************END Nested Validate Field WitFilters*******************************************************************"




}








